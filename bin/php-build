#!/bin/bash
#/ php-build, Builds PHP with recipes.
#/
#/ Usage: php-build [--definitions] [--ini|i <environment>] [<definition>] [<prefix>]
#/
#/ Arguments:
#/   definition:    What release should be used, as well as release-specific
#/                  configuration.
#/   prefix:        All built Executables, Configs and Libs are placed in this
#/                  directory. It's created if it doesn't exist.
#/
#/ Options:
#/   --definitions: Lists all available definitions
#/   --ini|i:       Specifies which php.ini-<environment> from the
#/                  source distribution is used as default php.ini
#/

set -e

if [ -n "$PHP_BUILD_DEBUG" ]; then
    set -x
fi

# Preserve STDERR on FD3, so we can easily log build
# errors on FD2 to a file and use FD3 for php-build's 
# visible error messages.
exec 3<&2

# Simpe function for resolving a
# relative path to an absolute one
# by only using `cd -L`.
#
# This is needed because BSD's `readlink` does not
# support the `-f` flag which is an issue on OSX.
function realpath {
    local path="$1"

    if [ -z "$path" ]; then
        echo "realpath: Path is empty" >&3
        return 1
    fi

    local cwd="$(pwd)"

    cd -L "$path"
    echo "$(pwd)"
    cd "$cwd"
}

PHP_BUILD_ROOT=$(realpath "$(dirname $0)/..")
TMP="$PHP_BUILD_ROOT/tmp/php-build"
PHP_DEFAULT_INI=

CONFIGURE_OPTIONS=$(cat "$PHP_BUILD_ROOT/share/php-build/default_configure_options")

# If `-i` or `--ini` is given as first argument, then
# treat the second argument as `php.ini` file. If this
# file does not exist, than it is looked up later
# in the PHP package.
if [ "$1" = "-i" ] || [ "$1" = "--ini" ]; then
    if [ -f "$2" ]; then
        PHP_DEFAULT_INI="$2"
    fi
    PHP_DEFAULT_INI="php.ini-$2"
    shift
    shift
fi

DEFINITION=$1
PREFIX=$2

E_DEFINITION_NOT_FOUND=127

# Processes the Help front matter of the script
# and displays it on STDERR.
function display_usage {
    grep '^#/' <"$0" | cut -c4- >&3
}

function init {
    if [ ! -d "$TMP" ]; then
        mkdir -p "$TMP"
    fi

    if [ ! -d "$TMP/packages" ]; then
        mkdir "$TMP/packages"
    fi

    if [ ! -d "$TMP/source" ]; then
        mkdir "$TMP/source"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/var/log/php-build" ]; then
        mkdir -p "$PHP_BUILD_ROOT/var/log/php-build"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/share/php-build/after-install.d" ]; then
        mkdir -p "$PHP_BUILD_ROOT/share/php-build/after-install.d"
    fi
}

function log {
    local marker="$1"
    local text="$2"

    echo "    [$marker]:  $text" >&3
}

function is_osx {
    local uname=$(uname)

    if [ "$uname" = "Darwin" ]; then
        return 0
    else
        return 1
    fi
}

function download {
    local url=$1
    local package_file="$TMP/packages/$(basename $url)"
    local temp_package="$TMP/$(basename $url)"

    log "Downloading" "$url"

    if [ -f "$temp_package" ]; then
        rm "$temp_package"
    fi

    if [ ! -f "$package_file" ]; then
        wget -qP "$TMP" "$url" > /dev/null
        cp "$temp_package" "$TMP/packages"
        rm "$temp_package"
    fi

    if [ -d "$TMP/source/$DEFINITION" ]; then
        rm -rf "$TMP/source/$DEFINITION"
    fi

    mkdir "$TMP/source/$DEFINITION"

    tar -xj --strip-components 1 -f "$package_file" -C "$TMP/source/$DEFINITION"
    return $?
}

function list_definitions {
    {
        for definition in "$PHP_BUILD_ROOT/share/php-build/definitions/"*
        do
            echo $(basename "$definition")
        done
    } | sort >&3
}

function install_package {
    local url=$1

    {
        download $url
        build_package "$TMP/source/$DEFINITION"
    } >&4 2>&1
}

function trigger_after_install {
    export PHP_BUILD_ROOT
    export PREFIX
    local triggers_dir="$PHP_BUILD_ROOT/share/php-build/after-install.d/"
    local triggers=$(ls "$triggers_dir")

    if [ -n "$triggers" ]; then
        for trigger in "$triggers_dir"*; do
            log "After Install Trigger" "$(basename $trigger)"
            "$trigger" 2>&4
        done
    fi
}

function load_plugins {
    if [ ! -d "$1" ]; then
        return 1
    fi

    for plugin in "$1/"*.sh
    do
        source $plugin
        echo "Loaded $(basename $plugin .sh) Plugin."
    done
}

function build_package {
    local source_path=$1
    local cwd="$(pwd)"

    if [ ! -d "$PREFIX" ]; then
        mkdir "$PREFIX"
    fi

    configure_package "$source_path"

    log "Make" "$source_path"

    cd "$source_path"
    make > /dev/null
    make install > /dev/null
    cd "$cwd"

    if [ -n "$PHP_DEFAULT_INI" ]; then
        if [ -f "$source_path/$PHP_DEFAULT_INI" ]; then
            echo "Using $PHP_DEFAULT_INI as php.ini"
            cp "$source_path/$PHP_DEFAULT_INI" "$PREFIX/etc/php.ini"
        else
            echo "$PHP_DEFAULT_INI not found in $source_path" >&3
        fi
    fi

    echo "Done."
}

# This function sets and unsets arguments for `configure`. Pass it
# the `-D` option to unset the argument given in `$2`. Otherwise
# the first argument is the name of the option and the second
# argument contains the optional value.
function configure_option {
    if [ "$1" = "-D" ]; then
        # This variable will contain the filtered arguments.
        local filtered=

        for option in $CONFIGURE_OPTIONS; do
            # If the argument starts with the given string in `$1`
            # then skip it from concatenation. Otherwise add it to
            # the filtered options.
            case "$option" in
                "$2"*) ;;
                *) filtered="$filtered $option";;
            esac
        done
        
        # Trim the leading whitespace added in the concatenation.
        filtered=$(echo "$filtered" | sed -e 's/[ ]*//')

        # Then replace the old argument list with the new one.
        CONFIGURE_OPTIONS="$filtered"
        return 0
    else
        if [ "$1" = "-R" ]; then
            configure_option -D "$2"
            configure_option "$2" "$3"
            return 0
        fi
    fi

    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $1"

    if [ -n "$2" ]; then
        CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS=$2"
    fi
}

# Compile PHP with SSL support
function with_openssl {
    stub=1
}

function configure_package {
    local source_path=$1
    local backup_pwd=$(pwd)

    if is_osx; then
        configure_option -D "--with-gettext"
        configure_option -D "--with-readline"
        configure_option "--with-libedit"

        configure_option -D "--with-png-dir"
        configure_option "--with-png-dir" "/usr/X11"
    fi

    local argv="$CONFIGURE_OPTIONS \
--with-config-file-path="$PREFIX/etc" \
--with-config-file-scan-dir="$PREFIX/etc/conf.d" \
--prefix=$PREFIX"
    
    log "Configure" "$source_path"

    cd "$source_path"

    if [ ! -d "$PREFIX/etc/conf.d" ]; then
        mkdir -p "$PREFIX/etc/conf.d"
    fi

    if [ "$(uname -p)" = "x86_64" ]; then
        argv="$argv --with-libdir=lib64"
    fi

    ./configure $argv > /dev/null

    cd "$backup_pwd"
}

function build_error {
    {
        echo
        echo "BUILD ERROR"
        echo $(tail -n1 "$LOG_PATH")
        echo
        echo "The Log is available here ${LOG_PATH}"
        echo
    } >&3
    
    cleanup_abort
}

function cleanup_abort {
    rm -rf "$PREFIX"
}

# Here the magic begins.

# Set up the directories needed for the source
# and the downloaded packages.
init

TIME="$(date "+%Y%m%d%H%M%S")"
LOG_PATH="$PHP_BUILD_ROOT/var/log/php-build/error.$DEFINITION.$TIME.log"

exec 4<> "$LOG_PATH"

# Display the Usage message if no arguments are given.
if [ -z $1 ]; then
    display_usage
    exit 1
fi

if [ "$1" = "--definitions" ]; then
    list_definitions
    exit 0
fi

# Check if the requested Definition exists.
if [ ! -f "$PHP_BUILD_ROOT/share/php-build/definitions/$DEFINITION" ]; then
    echo "Definition $DEFINITION not found." >&3
    exit $E_DEFINITION_NOT_FOUND
fi

# Load all definition plugins. Plugins register functions
# for use whithin definitions. See the xdebug and pyrus plugins for
# examples.
load_plugins "$PHP_BUILD_ROOT/share/php-build/plugins.d"

echo "$PHP_DEFAULT_INI gets used as php.ini"

echo
echo "Building $DEFINITION into $PREFIX"
echo

trap cleanup_abort SIGINT SIGTERM

trap build_error ERR EXIT
source "$PHP_BUILD_ROOT/share/php-build/definitions/$DEFINITION"

# After Install Triggers are all executables placed in `triggers/after-install.d`
#
trigger_after_install 2>&4

trap - ERR
trap - EXIT

if [ -n $LOG_PATH ]; then
    log "Info" "The Log File is not empty, but the Build did not fail.\
 Maybe just warnings got logged.\
 You can review the log in $LOG_PATH"
fi

log "Success" "Built $DEFINITION successfully."
